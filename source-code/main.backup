#include <iostream>
#include <sstream>
#include <string>
#include <algorithm>

using namespace std;

void bubbleSort(int arr[], int n);

int main()
{
    int num = 0;
    int numCases = 0;
    int numOfSearchEngines = 0;
    int numOfQueries = 0;
    string temp = "";
    stringstream ss;

    // Gets the number of test cases
    getline(cin, temp);
    ss.str(temp);
    ss >> numCases;

    // Resets the string stream
    ss.str("");
    ss.clear();

    for(int i = 1; i <= numCases; i++)
    {
        // Gets the number of search engines
        getline(cin, temp);
        ss.str(temp);
        ss >> numOfSearchEngines;
        //cout << "Number of search engines: " << numOfSearchEngines << endl;

        // Creates the string array to store the search engine list
        string searchEngines[numOfSearchEngines];
        int occurrenceGap[numOfSearchEngines] = {};
        int occurrence[numOfSearchEngines] = {};

        std::fill_n(occurrenceGap, numOfSearchEngines, -1);

        // The loop adds the search engines from the input stream to the array 
        for(int j = 0; j < numOfSearchEngines; j++)
        {
            getline(cin, temp);
            searchEngines[j] = temp;
            //cout << searchEngines[j] << endl;
        }

        ss.str("");
        ss.clear();

        getline(cin, temp);
        ss.str(temp);
        ss >> numOfQueries;

        // Adds the queries from the text file to an array
        string queries[numOfQueries] = {};
        for(int z = 0; z < numOfQueries; z++)
        {
            getline(cin, temp);
            queries[z] = temp;
        }

        for(int k = 0; k < numOfSearchEngines; k++)
        {
            for(int h = 0; h < numOfQueries; h++)
            {
                if(searchEngines[k].compare(queries[h]) == 0)
                {
                    occurrence[k]++;
                }
            }
        }

        int p = 0;
        num = occurrence[p];
        // Finding the minimum number of occurences of search engine in the queries
        for(;p < numOfSearchEngines; p++)
        {
            if(num > occurrence[p])
            {
                num = occurrence[p];
            }
        }

        int index[numOfSearchEngines];
        std::fill_n(index, numOfSearchEngines, -1);

        int q = 0;
        for(int i = 0; i < numOfSearchEngines; i++)
        {
            if(num == occurrence[i])
            {
                index[q] = i;
                q++;
            }
        }

        for(int j = 0; j < numOfSearchEngines && index[j] != -1; j++)
        {
            if(occurrence[j] >= 2)
            {
                
            }
        }

        //cout << "Number of Queries: " << numOfQueries << endl;
    }
}